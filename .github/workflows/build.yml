name: Build and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - created
      - published

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true

      - name: Run tests
        run: go test -v ./...

  build:
    name: Build for ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [linux-amd64, linux-arm64, darwin-amd64, darwin-arm64, windows-amd64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true

      - name: Set environment variables
        run: |
          echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV
          echo "COMMIT=${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Build binary
        run: |
          # Parse target
          OS=$(echo ${{ matrix.target }} | cut -d '-' -f 1)
          ARCH=$(echo ${{ matrix.target }} | cut -d '-' -f 2)
          
          # Set output name
          if [ "$OS" = "windows" ]; then
            OUTPUT="lumine-${OS}-${ARCH}.exe"
          else
            OUTPUT="lumine-${OS}-${ARCH}"
          fi
          
          # Build
          GOOS=$OS GOARCH=$ARCH go build -o $OUTPUT -ldflags "-X main.version=${VERSION} -X main.commit=${COMMIT}" .
          
          # Make executable (non-Windows)
          if [ "$OS" != "windows" ]; then
            chmod +x $OUTPUT
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lumine-${{ matrix.target }}${{ endsWith(matrix.target, 'windows-amd64') && '.exe' || '' }}
          path: lumine-${{ matrix.target }}${{ endsWith(matrix.target, 'windows-amd64') && '.exe' || '' }}

  release:
    name: Create Release
    needs: [test, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: ls -R artifacts

      - name: Create checksums
        run: |
          cd artifacts
          for dir in */; do
            cd "$dir"
            for file in *; do
              if [ -f "$file" ]; then
                openssl dgst -sha256 "$file" > "../$file.sha256"
              fi
            done
            cd ..
          done
          ls -la

      - name: Upload binaries to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            artifacts/*/*
            artifacts/*.sha256
